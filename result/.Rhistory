stars=matrix(c(size,size/2), nrow=1, ncol=nor*2),
add=TRUE, inches=FALSE)
})
}
# no clipping, edges will be below the vertices anyway
add.vertex.shape("star", clip=igraph.shape.noclip,
plot=mystar, parameters=list(vertex.norays=5))
plot(g, vertex.shape="star", vertex.color=rainbow(vcount(g)),
vertex.size=seq(10,20,length=vcount(g)))
plot(g, vertex.shape="star", vertex.color=rainbow(vcount(g)),
vertex.size=seq(10,20,length=vcount(g)),
vertex.norays=rep(4:8, length=vcount(g)))
#################################################################
# Pictures as vertices.
# Similar musicians from last.fm, we start from an artist and
# will query two levels. We will use the XML, png and jpeg packages
# for this, so these must be available. Otherwise the example is
# skipped
loadIfYouCan <- function(pkg) suppressWarnings(do.call(require, list(pkg)))
if (loadIfYouCan("XML") && loadIfYouCan("png") &&
loadIfYouCan("jpeg")) {
url <- paste(sep="",
'http://ws.audioscrobbler.com/',
'2.0/?method=artist.getinfo&artist=%s',
'&api_key=1784468ada3f544faf9172ee8b99fca3')
getartist <- function(artist) {
cat("Downloading from last.fm. ... ")
txt <- readLines(sprintf(url, URLencode(artist)))
xml <- xmlTreeParse(txt, useInternal=TRUE)
img <- xpathSApply(xml, "/lfm/artist/image[@size='medium'][1]",
xmlValue)
if (img != "") {
con <- url(img, open="rb")
bin <- readBin(con, what="raw", n=10^6)
close(con)
if (grepl("\\.png$", img)) {
rast <- readPNG(bin, native=TRUE)
} else if (grepl("\\.jpe?g$", img)) {
rast <- readJPEG(bin, native=TRUE)
} else {
rast <- as.raster(matrix())
}
} else {
rast <- as.raster(numeric())
}
sim <- xpathSApply(xml, "/lfm/artist/similar/artist/name", xmlValue)
cat("done.\n")
list(name=artist, image=rast, similar=sim)
}
ego <- getartist("Placebo")
similar <- lapply(ego$similar, getartist)
edges1 <- cbind(ego$name, ego$similar)
edges2 <- lapply(similar, function(x) cbind(x$name, x$similar))
edges3 <- rbind(edges1, do.call(rbind, edges2))
edges <- edges3[ edges3[,1] %in% c(ego$name, ego$similar) &
edges3[,2] %in% c(ego$name, ego$similar), ]
musnet <- simplify(graph.data.frame(edges, dir=FALSE,
vertices=data.frame(name=c(ego$name, ego$similar))))
str(musnet)
V(musnet)$raster <- c(list(ego$image), lapply(similar, "[[", "image"))
plot(musnet, layout=layout.star, vertex.shape="raster",
vertex.label=V(musnet)$name, margin=.2,
vertex.size=50, vertex.size2=50,
vertex.label.dist=2, vertex.label.degree=0)
} else {
message("You need the `XML', `png' and `jpeg' packages to run this")
}
#################################################################
# all vertex shapes, minus "raster", that might not be available
shapes <- setdiff(vertex.shapes(), "")
g <- graph.ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
vertex.size=15, vertex.size2=15,
vertex.pie=lapply(shapes, function(x) if (x=="pie") 2:6 else 0),
vertex.pie.color=list(heat.colors(5)))
# add new vertex shape, plot nothing with no clipping
add.vertex.shape("nil")
plot(g, vertex.shape="nil")
#################################################################
# triangle vertex shape
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
# clips as a circle
add.vertex.shape("triangle", clip=vertex.shapes("circle")$clip,
plot=mytriangle)
plot(g, vertex.shape="triangle", vertex.color=rainbow(vcount(g)),
vertex.size=seq(10,20,length=vcount(g)))
#################################################################
# generic star vertex shape, with a parameter for number of rays
mystar <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size  <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
norays <- params("vertex", "norays")
if (length(norays) != 1 && !is.null(v)) {
norays <- norays[v]
}
mapply(coords[,1], coords[,2], vertex.color, vertex.size, norays,
FUN=function(x, y, bg, size, nor) {
symbols(x=x, y=y, bg=bg,
stars=matrix(c(size,size/2), nrow=1, ncol=nor*2),
add=TRUE, inches=FALSE)
})
}
# no clipping, edges will be below the vertices anyway
add.vertex.shape("star", clip=igraph.shape.noclip,
plot=mystar, parameters=list(vertex.norays=5))
plot(g, vertex.shape="star", vertex.color=rainbow(vcount(g)),
vertex.size=seq(10,20,length=vcount(g)))
plot(g, vertex.shape="star", vertex.color=rainbow(vcount(g)),
vertex.size=seq(10,20,length=vcount(g)),
vertex.norays=rep(4:8, length=vcount(g)))
#################################################################
# Pictures as vertices.
# Similar musicians from last.fm, we start from an artist and
# will query two levels. We will use the XML, png and jpeg packages
# for this, so these must be available. Otherwise the example is
# skipped
loadIfYouCan <- function(pkg) suppressWarnings(do.call(require, list(pkg)))
if (loadIfYouCan("XML") && loadIfYouCan("png") &&
loadIfYouCan("jpeg")) {
url <- paste(sep="",
'http://ws.audioscrobbler.com/',
'2.0/?method=artist.getinfo&artist=%s',
'&api_key=1784468ada3f544faf9172ee8b99fca3')
getartist <- function(artist) {
cat("Downloading from last.fm. ... ")
txt <- readLines(sprintf(url, URLencode(artist)))
xml <- xmlTreeParse(txt, useInternal=TRUE)
img <- xpathSApply(xml, "/lfm/artist/image[@size='medium'][1]",
xmlValue)
if (img != "") {
con <- url(img, open="rb")
bin <- readBin(con, what="raw", n=10^6)
close(con)
if (grepl("\\.png$", img)) {
rast <- readPNG(bin, native=TRUE)
} else if (grepl("\\.jpe?g$", img)) {
rast <- readJPEG(bin, native=TRUE)
} else {
rast <- as.raster(matrix())
}
} else {
rast <- as.raster(numeric())
}
sim <- xpathSApply(xml, "/lfm/artist/similar/artist/name", xmlValue)
cat("done.\n")
list(name=artist, image=rast, similar=sim)
}
ego <- getartist("Placebo")
similar <- lapply(ego$similar, getartist)
edges1 <- cbind(ego$name, ego$similar)
edges2 <- lapply(similar, function(x) cbind(x$name, x$similar))
edges3 <- rbind(edges1, do.call(rbind, edges2))
edges <- edges3[ edges3[,1] %in% c(ego$name, ego$similar) &
edges3[,2] %in% c(ego$name, ego$similar), ]
musnet <- simplify(graph.data.frame(edges, dir=FALSE,
vertices=data.frame(name=c(ego$name, ego$similar))))
str(musnet)
V(musnet)$raster <- c(list(ego$image), lapply(similar, "[[", "image"))
plot(musnet, layout=layout.star, vertex.shape="raster",
vertex.label=V(musnet)$name, margin=.2,
vertex.size=50, vertex.size2=50,
vertex.label.dist=2, vertex.label.degree=0)
} else {
message("You need the `XML', `png' and `jpeg' packages to run this")
}
shapes <- setdiff(vertex.shapes(), "")
g <- graph.ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
vertex.size=15, vertex.size2=15,
vertex.pie=lapply(shapes, function(x) if (x=="pie") 2:6 else 0),
vertex.pie.color=list(heat.colors(5)))
shapes <- setdiff(vertex.shapes(), "")
shapes
shapes <- setdiff(vertex.shapes(), "")
g <- graph.ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
vertex.size=15, vertex.size2=15,
vertex.pie=lapply(shapes, function(x) if (x=="pie") 2:6 else 0),
vertex.pie.color=list(heat.colors(5)))
shapes <- setdiff(vertex.shapes(), "")
g <- graph.ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
+      vertex.size=15, vertex.size2=15,
+      vertex.pie=lapply(shapes, function(x) if (x=="pie") 2:6 else 0),
+      vertex.pie.color=list(heat.colors(5)))
shapes <- setdiff(vertex.shapes(), "")
g <- graph.ring(length(shapes))
set.seed(42)
plot(g, vertex.shape=shapes, vertex.label=shapes, vertex.label.dist=1,
+      vertex.size=15, vertex.size2=15,
corrplot(data,method='color',p.mat=data, insig="p-value", sig.level = -1)
input = read.csv('nonLLC-3-5-200.csv',header=FALSE)
input.matrix <- data.matrix(input)
data <- normalize(input.matrix)
corrplot(data,method='color',p.mat=data, insig="p-value", sig.level = -1)
corrplot(data,method='color',p.mat=as.dataframe(data), insig="p-value", sig.level = -1)
corrplot(data,method='color',p.mat=as.matrix(data), insig="p-value", sig.level = -1)
corrplot(data,p.mat=as.matrix(data), insig="p-value", sig.level = -1)
?corrplot
corrplot(data,addCoefasPercent=TRUE)
corrplot(as.matrix(data),addCoefasPercent=TRUE)
normalize<-function(m){
rsum <- rowSums(m)
for(i in 1 : dim(m)[[1]]){
m[i,] = m[i,]/rsum[i]
}
return(m)
}
input = read.csv('nonLLC-3-5-200.csv',header=FALSE)
input.matrix <- data.matrix(input)
data <- normalize(input.matrix)
corrplot(as.matrix(data),addCoefasPercent=TRUE)
example(corrplot)
corrplot(as.matrix(data),addCoef.col="grey")
corrplot(as.matrix(data),method="color",addCoef.col="grey")
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1))
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
"cyan", "#007FFF", "blue", "#00007F"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
col4 <- colorRampPalette(c("white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
source('~/.active-rstudio-document', echo=TRUE)
?simplify
source('~/.active-rstudio-document', echo=TRUE)
library(igraph)
gg <- nexus.get("Davis")
plot(gg)
gg.com <- fastgreedy.community(gg)
gg.com
str(gg.com)
gg.com
library(corrplot)
input = read.csv('nonLLC-3-5-200.csv',header=FALSE)
input.matrix <- data.matrix(input)
data <- normalize(input.matrix)
col4 <- colorRampPalette(c("white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
normalize<-function(m){
rsum <- rowSums(m)
for(i in 1 : dim(m)[[1]]){
m[i,] = m[i,]/rsum[i]
}
return(m)
}
col4 <- colorRampPalette(c("red", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
col4 <- colorRampPalette(c("green", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
col4 <- colorRampPalette(c("blue", "red"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(c("dark blue", "red"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(c("green", "red"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(c("white", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(c("red", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(bias=1,c("red", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRampPalette(bias=10,c("red", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
normalize<-function(m){
rsum <- rowSums(m)
for(i in 1 : dim(m)[[1]]){
m[i,] = m[i,]/rsum[i]
}
return(m)
}
colorRamp(c("red", "green"))( (0:4)/4 )
colorRamp(c("red", "green"))( (0:4)/4 )
col4 <- colorRamp(c("red", "green"))( (0:4)/4 )
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(10))
col4 <- colorRamp(c("red", "green"))( (0:4)/4 )
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4
)
col4 <- colorRamp(c("red", "green"))( (0:100)/100 )
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4
)
col4 <- colorRampPalette(c("blue", "red"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
col4 <- colorRampPalette(c("blue", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(100))
col4 <- colorRampPalette(c("red", "white", "blue"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(200))
col4 <- colorRampPalette(c("red", "white", "red"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(200))
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="grey",cl.lim = c(0, 1),col=col4(200))
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
cate_names <- c('CALsuburb','MITcoast','MITforest','MIThighway','MITinsidecity','MITmountain','MITopencountry','MITstreet','MITtallbuilding','PARoffice','bedroom','industrial','kitchen','livingroom','store');
input$colnames <- cate_names
data <- normalize(input.matrix)
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
input.matrix$colnames <- cate_names
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
str(data)
data <- normalize(input.matrix)
input.matrix <- data.matrix(input)
data <- normalize(input.matrix)
colnames(input.matrix) <- cate_names
length(cate_names)
size(input.matrix)
dim(input.matrix)
input = read.csv('nonLLC-3-5-200.csv',header=FALSE)
input.matrix <- data.matrix(input)
colnames(input.matrix) <- cate_names
data <- normalize(input.matrix)
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
rownames(input.matrix) <- cate_names
data <- normalize(input.matrix)
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
input = read.csv('nonLLC_Kernel-3-5-200.csv',header=FALSE)
input = read.csv('nonLLC_Kernal-3-5-200.csv',header=FALSE)
input.matrix <- data.matrix(input)
colnames(input.matrix) <- cate_names
rownames(input.matrix) <- cate_names
data <- normalize(input.matrix)
col4 <- colorRampPalette(c("red", "white", "black"))
corrplot(as.matrix(data),method="color",addCoef.col="orange",cl.lim = c(0, 1),col=col4(200))
trace(data)
trace(data)
sum(trace(data))
data
sum(trace(as.matrix(data)))
tr(as.matrix(data)))
tr(as.matrix(data))
matrix.trace(as.matrix(data))
install.packages("matrixcalc")
library(matrixcal)
library(matrixcalc)
matrix.trace(as.matrix(data))
matrix.trace(as.matrix(data))/15
36.5*exp(-72)
1.1*exp(-1.2)
1.1*exp(-1.2)-0.6
1.04*exp(-1.2)
0.5*exp(-1.2)
2*0.1505*0.3132
r = runif(1)
r
while(T){
r = runif(1)
}
Time = 100000
t <- 0
k <- 0
lambda <- 2
while(T){
r = runif(1)
t = t - ln(r)/lambda
if(t > Time) break;
k = k + 1
S[k] = t
}
log(exp(1))
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
S[k] = t
}
S <- vector()
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
S[k] = t
}
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
k
k
S[k] = t
}
t <- 0
k <- 0
lambda <- 2
S <- vector()
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
print(k)
S[k] = t
}
Time = 1000
t <- 0
k <- 0
lambda <- 2
S <- vector()
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
print(k)
S[k] = t
}
Time = 10000
t <- 0
k <- 0
lambda <- 2
S <- vector()
while(T){
r = runif(1)
t = t - log(r)/lambda
if(t > Time) break;
k = k + 1
S[k] = t
}
k
Time = 10000
t <- 0
k <- 0
sum_s = 0
lambda <- 2
S <- vector()
while(T){
r = runif(1)
t = t - log(r)/lambda
if(-log(r)/lambda > t){
sum_s = sum_s + log(r)/lambda
}
if(t > Time) break;
k = k + 1
S[k] = t
}
k
sum_s
source('~/.active-rstudio-document', echo=TRUE)
sum_s
source('~/.active-rstudio-document', echo=TRUE)
sum_s
print(sum_s/t)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
k_s
k_s/k
exp(-1.2)
source('~/.active-rstudio-document', echo=TRUE)
k_s/k
exp(-1.2)
source('~/.active-rstudio-document', echo=TRUE)
k_s/s
k_s/k
mean(s_s)
2*mean(s_s)*(k_s/k)
0.5*exp(-1.2)
0.5*exp(-1.2)
source('~/.active-rstudio-document', echo=TRUE)
exp(-0.3)
k_s/k
0.5*(k_s/k)*mean(s_s)
mean(s_s)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for(k in 1 : 6){
print(rev(k))
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
revv <- vector()
revv <- vector()
for(k in 1 : 50){
revv[k] = rev(k)
print(revv[k])
}
plot(revv)
plot(revv)
2*sqrt(10)
revv
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
